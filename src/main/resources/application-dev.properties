spring.main.allow-bean-definition-overriding=true

spring.mvc.static-path-pattern=/assets/**, /resources/records/img/**, 
logging.level.com.visionous.dms = DEBUG
logging.level.org.springframework.web= DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.org.hibernate.orm.jdbc.bind=trace
#logging.level.org.hibernate= ERROR

# Spring mail setting
spring.mail.host=smtp-mail.outlook.com
spring.mail.port=587
spring.mail.username=klevin.delimeta@hotmail.com
spring.mail.password=Klklkl@002
spring.mail.protocol=smtp
spring.mail.defaultEncoding=UTF-8
spring.mail.properties.mail.smtp.from=klevin.delimeta@hotmail.com
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.socketFactory.port = 587
spring.mail.properties.mail.smtp.ssl.enable=false
spring.mail.properties.mail.smtp.protocol = smtp

# Multipart File Upload Settings
spring.servlet.multipart.max-file-size=1GB
spring.servlet.multipart.max-request-size=1GB

spring.servlet.multipart.enabled=true
spring.servlet.multipart.location=${java.io.tmpdir}

hibernate.show_sql = true
logging.file.path=\logs\

dcms.app.version=@project.version@-Alpha

# Postgress vmi host Alpha Test Db
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.datasource.url=jdbc:postgresql://161.97.136.98:5432/testalphadmsdb
spring.datasource.username=testalphadbadmin
spring.datasource.password=testalphadbadmin
spring.datasource.driver-class-name=org.postgresql.Driver

#### KEYCLOAK ####
keycloak.enabled=true

# keycloak oauth client config (Connect to prod for now)
spring.security.oauth2.client.registration.keycloak.client-id=demo-oxydent-login
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.scope=openid
spring.security.oauth2.authorizationserver.endpoint.authorization-uri=https://authentication.o2dent.com/realms/demo/protocol/openid-connect/auth
spring.security.oauth2.authorizationserver.endpoint.oidc.logout-uri=https://authentication.o2dent.com/realms/demo/protocol/openid-connect/logout

# Configure OIDC provider
spring.security.oauth2.client.provider.keycloak.issuer-uri=https://authentication.o2dent.com/realms/demo
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username

# validation of jwt on keycloak
spring.security.oauth2.resourceserver.jwt.issuer-uri=https://authentication.o2dent.com/realms/demo

#### CONSUL ####
spring.cloud.consul.enabled=true

spring.application.name=@project.artifactId@
build.version=@project.version@
build.timestamp=@timestamp@

spring.cloud.consul.discovery.prefer-ip-address=false
spring.cloud.consul.discovery.prefer-agent-address=false

spring.cloud.consul.discovery.service-name=${spring.application.name}
spring.cloud.consul.discovery.instance-id=${spring.application.name}:${spring.profiles.active}:${vcap.application.instance_id:${spring.application.instance_id:${random.value}}}
spring.cloud.consul.discovery.acl-token=3c30cc81-70ea-ccfd-2694-7eda57b7b21a
spring.cloud.consul.discovery.health-check-path=/my-health-check
spring.cloud.consul.discovery.health-check-interval=360s
spring.cloud.consul.discovery.enabled=true
#spring.cloud.consul.host = http://o2dent.com
#spring.cloud.consul.port =  8500

## Let spring search consul for config import first
## If consul server is not up Spring will import config from '.properties' config file.
spring.config.import=optional:consul:/

## Consul client configuration
spring.cloud.consul.config.enabled=true
## Key to lookup configuration, i.e filepath
spring.cloud.consul.config.data-key= ${spring.profiles.active}/data
## Consul file prefix on server, i.e folderpath
spring.cloud.consul.config.prefixes= config
## Type of file to import
spring.cloud.consul.config.format= yaml
